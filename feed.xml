<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ifuryst.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ifuryst.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-21T17:00:11+00:00</updated><id>https://ifuryst.github.io/feed.xml</id><title type="html">ifuryst</title><subtitle>📝 &amp; 💭 </subtitle><entry><title type="html">[Iter-X] 5/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-5-100/" rel="alternate" type="text/html" title="[Iter-X] 5/100days"/><published>2025-02-21T15:59:59+00:00</published><updated>2025-02-21T15:59:59+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-5-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-5-100/"><![CDATA[<p>Day5️⃣</p> <p>Progress isn’t enough, so I’ll fill the word count with some random musings.</p> <p>Today, I saw Bluesky (a decentralized social network project created by the original Twitter founders and engineers). They have a team of only 13 people, with just one frontend developer, and they use a shared codebase across all platforms. To put things into perspective, their service currently has<a href="https://bsky-users.theo.io/"><strong>31,951,353</strong></a>users (with an average of 0.6 new users every second). Their valuation is around $700 million.</p> <p>The age of LLMs has changed a lot, and the first group to be swept up in it was developers. Now, most developers are using AI-assisted development tools in their workflows, which has helped improve efficiency and expand their capabilities. Many examples in the industry show that small teams have experienced a massive increase in efficiency. This is great news, but there’s also some bad news 😟.</p> <p>Data shows that job opportunities for developers are sharply declining. Let’s look at the data from FRED (a source for U.S. and global economic data):</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-21-iter-x-5-100/FRED1.2025-02-21_10-41-19-480.webp 480w,/assets/img/2025-02-21-iter-x-5-100/FRED1.2025-02-21_10-41-19-800.webp 800w,/assets/img/2025-02-21-iter-x-5-100/FRED1.2025-02-21_10-41-19-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-21-iter-x-5-100/FRED1.2025-02-21_10-41-19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Software Developer Job Openings </div> <p>Based on data from Indeed (a job search site), software developer job openings in the U.S. had been rising post-pandemic (when interest rates were near zero), but after May 2022, they started to decline and have remained low since.</p> <p>Now, many companies, including Big Tech, are cutting headcounts (even laying off employees). One reason is that the Federal Reserve’s interest rates haven’t dropped yet (and there’s little room for a decrease this year), and another reason is that companies are now working off the headcounts hired during the pandemic, which were meant to hedge risks.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-480.webp 480w,/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-800.webp 800w,/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Software Developer Job Openings vs. Federal Reserve Interest Rates </div> <p>We can see that as the FED started raising interest rates, job openings began to decrease (larger companies are more influenced by capital markets, where small differences in interest rates can have a big impact).</p> <p>Let’s compare total job openings with software developer job openings:</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-480.webp 480w,/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-800.webp 800w,/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-21-iter-x-5-100/FRED2.2025-02-21_10-53-27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Software Developer Job Openings vs. Total Job Openings </div> <p>It’s clear there’s a difference. Overall job openings have stayed relatively steady, and their decline is less sharp. However, if we focus on the area where they intersect, it shows that job openings were more abundant earlier, and now, the decrease is just catching up, which could level out over time.</p> <p>However, there is some bias in the data, as it’s based on Indeed, similar to how a report on employment data from Boss Zhipin only reflects its platform’s data and may not fully represent the broader environment. Especially in AI-focused startups, there’s a good chance they’re not covered, but the trend is still noticeable.</p> <p>I wonder what kind of major changes we will see in the next few years. Individuals and companies are always influenced by forces beyond their control. All we can do is improve ourselves, make ourselves stronger, and keep up with the times to avoid being left behind and discarded by the market. That’s all we can do. Looking back, the rise of startups might also be because each generation has people growing up in this environment, who understand what this generation needs and, with the right cross-disciplinary skills and timing, come up with new ideas.</p> <p>I had 1v1 chats with several people today, including entrepreneurs from my industry and product managers. We exchanged ideas, and I could feel the thoughts behind some of the products from their creators. Some of them already have products out, and you can see their ideas and intentions in them. It’s pretty nice. Talking with competitors can feel a little weird, though, haha. Many people mentioned the concept of “moats” or “barriers to entry,” and I think that makes sense and aligns with intuition—there will always be someone entering the field. However, I remain optimistic. The competitive nature of the market itself shows potential. As for the travel industry, its market size depends on the depth of the field. Currently, most profits are coming from OTAs like Ctrip. It will depend on the vision and skill of each founder. Great products and the right business models will make a difference. But not every business is aimed at the large market; some small, beautiful products and teams are what many people pursue nowadays. Looking forward to learning from more experts 😎.</p> <p>Back to the main point, I worked on part of the main trip page today. It’s still rough and needs more polishing. I really like two color schemes: one with a cool-toned palette that feels calming, and one with contrasting color blocks that gives off a cool vibe. I’m thinking of letting users switch between themes.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-21-iter-x-5-100/TripPageDesign1.2025-02-22_00-36-46-480.webp 480w,/assets/img/2025-02-21-iter-x-5-100/TripPageDesign1.2025-02-22_00-36-46-800.webp 800w,/assets/img/2025-02-21-iter-x-5-100/TripPageDesign1.2025-02-22_00-36-46-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-21-iter-x-5-100/TripPageDesign1.2025-02-22_00-36-46.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-21-iter-x-5-100/TripPageDesign2.2025-02-22_00-36-52-480.webp 480w,/assets/img/2025-02-21-iter-x-5-100/TripPageDesign2.2025-02-22_00-36-52-800.webp 800w,/assets/img/2025-02-21-iter-x-5-100/TripPageDesign2.2025-02-22_00-36-52-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-21-iter-x-5-100/TripPageDesign2.2025-02-22_00-36-52.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Trip Page Design </div> <p>Here’s a summary of the current situation:</p> <ol> <li>Prototype Design: 4%, ideas are coming together, currently working with 2️⃣</li> <li>UI/UX Design: 4%, it’s in progress</li> <li>Backend (Go) Development: 10%, currently paused, need to focus on 2️⃣ and 4️⃣ first</li> <li>Client (Flutter) Progress: 0%, waiting for 1️⃣ &amp; 2️⃣ to be completed</li> </ol> <p>In the next few days, I’ll be focusing on 1️⃣ and 2️⃣.</p> <p>If you think you meet the following criteria, feel free to reach out:</p> <ol> <li>Can persist</li> <li>Have dreams</li> <li>Interested in this field</li> </ol>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[Day5️⃣]]></summary></entry><entry><title type="html">[Iter-X] 4/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-4-100/" rel="alternate" type="text/html" title="[Iter-X] 4/100days"/><published>2025-02-20T14:59:59+00:00</published><updated>2025-02-20T14:59:59+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-4-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-4-100/"><![CDATA[<p>Day4️⃣</p> <p>Off-topic: Today I came across the word <code class="language-plaintext highlighter-rouge">funemployed</code>, and I found it quite interesting. It’s a combination of “fun” and “unemployed”—such a fun wordplay.</p> <p>I chatted with two people today about an app, and I got some ideas and feedback, including some possible future features. We also talked about competitors. Since I’ve looked into a few competitors before, it’s a good time to organize my thoughts and take a look. Is it too early or too late to analyze competitors at this stage? 😄</p> <table> <thead> <tr> <th>App</th> <th>Advantages</th> <th>Disadvantages</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td>行程助手</td> <td>1. Comprehensive features<br/>2. Relatively complete point-of-interest data</td> <td>1. Outdated<br/>2. Sometimes very laggy</td> <td>A product I’ve been using for years, but it feels a bit neglected. No progress means falling behind.</td> </tr> <tr> <td>指北旅行</td> <td>1. Relatively complete point-of-interest data<br/>2. Can import Xiaohongshu notes and auto-generate itineraries<br/>3. Sparse hotel information</td> <td>1. Takes too long to generate itineraries with many days; I killed the app halfway<br/>2. Only focuses on single-city trips, which is limiting<br/>3. UI/UX still lacks smoothness</td> <td>It focuses on single-city travel, but its itinerary generation can handle multi-city trips. This behavior is a bit confusing. However, importing Xiaohongshu and generating itineraries works well.</td> </tr> <tr> <td>轻舟+</td> <td>1. Good ideas like memories and collecting stamps<br/>2. Customizable app themes and map styles</td> <td>1. Subscription model<br/>2. UI/UX is poor</td> <td>I think the subscription model is a downside. I don’t think products like this should rely on subscriptions for monetization.</td> </tr> <tr> <td>圆周旅迹</td> <td>1. Best UI/UX<br/>2. Most aligned with my ideal app<br/>3. Smooth experience<br/>4. Supports importing Xiaohongshu notes to auto-generate itineraries</td> <td>1. Incomplete point-of-interest data</td> <td>This product provides the best overall experience—smooth and polished. It aligns most closely with my ideal app. The only downside is the incomplete point-of-interest data, and Xiaohongshu itinerary imports aren’t as effective as Guide Travel’s.</td> </tr> <tr> <td>小旅星</td> <td> </td> <td> </td> <td>Haha, I’m unilaterally forcing it to withdraw 😅</td> </tr> </tbody> </table> <p>First, the Trip Assistant is excluded from ranking. I’ve used it for many years, so I’m used to it, including its lag. I usually use it to plan basic itineraries, then move them to Notion. Haha, I wonder if the product is still being maintained. I hope the team can kick me if they see this, just to let me know.</p> <p>On RedNote, when searching for travel planning apps, I mostly saw Round Trip Tracks, and it truly lives up to expectations. It’s the best app among these, in my opinion (waiting for mine to come out 🙇🏾‍♂️). It’s smooth, with very few lags, and many operations are aligned with my ideas for my app. The only drawback is incomplete point-of-interest data and less powerful AI. If they focus on these areas, it could improve even more. Feel free to reach out to me, the wild player, for a chat 🧑🏿‍💻.</p> <p>I found Guide Travel through RedNote ads. I’d say it’s the second best among these apps, but personally, I wouldn’t use it. Light Boat+ was recommended by someone, and it’s just okay. The subscription model made me turn away right away. Little Travel Star—let’s not talk about it.</p> <p>None of these apps support internationalization. They don’t even have basic language switching.</p> <p>After reviewing, I’ll continue designing my prototype at my usual turtle pace🥺</p> <p>Current situation summary:</p> <ol> <li>Prototype design: 3%, ideas are in place, currently progressing with 2️⃣</li> <li>UI/UX design: 3%, it’s in progress</li> <li>Backend (Go) development: 10%, holding steady for now, need to prioritize 2️⃣ and 4️⃣ first</li> <li>Client-side (Flutter) progress: 0%, waiting for 1️⃣ &amp; 2️⃣ to be completed, today a part-time developer joined 😻</li> </ol> <p>In the next few days, I’ll focus on 1️⃣ and 2️⃣.</p> <p>If you meet the following criteria, feel free to reach out:</p> <ol> <li>Can persevere</li> <li>Have dreams</li> <li>Are interested</li> </ol>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[Day4️⃣]]></summary></entry><entry><title type="html">[Iter-X] 3/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-3-100/" rel="alternate" type="text/html" title="[Iter-X] 3/100days"/><published>2025-02-19T15:59:59+00:00</published><updated>2025-02-19T15:59:59+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-3-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-3-100/"><![CDATA[<p>Day3️⃣</p> <p>I stayed up all night last night, and today I’ve been feeling sluggish all day. I didn’t have time to check the latest news, so I just listened to the ALL-IN Podcast during my commute. I wasn’t feeling great and intended to rest early, but I ended up staying up past midnight 😪. The past few days, my side projects have been pretty busy, so it’s hard to find time for everything.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%201-480.webp 480w,/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%201-800.webp 800w,/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%201-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%201.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%202-480.webp 480w,/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%202-800.webp 800w,/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%202-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-3-100/The%20Nvidia%20Way%202.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> The Nvidia Way </div> <p>I’ve been trying to squeeze in some time to read The Nvidia Way. I’ve only got the last two sections left. Today I read about how Jensen Huang is a workaholic, and how the entire company’s atmosphere is high-pressure and intense. I feel a bit conflicted about this.</p> <p>From an entrepreneurial or career perspective, it’s understandable that the founder is like this, and it could even increase the chances of success. I can relate deeply because I’m also a workaholic. But at the same time, as one of the many regular office workers, I can’t help but wonder if such “great” companies are really the end goal for employees.</p> <p>I really value work-life balance. It’s not that I don’t want to work, but I think people should have space outside of work, whether it’s for family, solitude, or anything else they enjoy. All three words in “work-life balance” are important.</p> <p>So, I feel conflicted about it. When reading that part, I guess I’m thinking from two different angles. If I look at it from one side only, I might feel strongly and defend my viewpoint. Maybe if my desire to start a business fades, I’ll start defending work-life balance more. Or if I succeed as an entrepreneur and become a boss, I might feel that not being aggressive and seizing market opportunities is a problem. But perhaps it’s not a simple black-and-white issue—there’s information asymmetry and trade-offs that come with decisions, and it’s hard to summarize in one sentence. Thinking dialectically helps you reflect on things. What’s important isn’t coming to a conclusion but the process of thinking 🐨.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-3-100/BSing2025-02-19_23-19-01-480.webp 480w,/assets/img/2025-02-19-iter-x-3-100/BSing2025-02-19_23-19-01-800.webp 800w,/assets/img/2025-02-19-iter-x-3-100/BSing2025-02-19_23-19-01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-3-100/BSing2025-02-19_23-19-01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-3-100/Prototype.2025-02-19_23-52-00-480.webp 480w,/assets/img/2025-02-19-iter-x-3-100/Prototype.2025-02-19_23-52-00-800.webp 800w,/assets/img/2025-02-19-iter-x-3-100/Prototype.2025-02-19_23-52-00-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-3-100/Prototype.2025-02-19_23-52-00.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Prototype &amp; BSing </div> <p>Today, I still managed to make some progress on my project. I quickly sketched out some wireframes (+ made some rough UI design), but there are a few pages left to complete. I also need to dig deeper into the interaction logic and refine the UX.</p> <p>Here’s a summary of the current situation:</p> <ol> <li>Prototype Design: 3%. I have some ideas now, but it will still progress alongside item 2️⃣.</li> <li>UI/UX Design: 3%. It’s started, but there are no substantial results yet. I had a chat with some designers about the color scheme and came up with some key terms (minimalist design, flat design, contrasting colors, Morandi color palette, high saturation, Memphis design, acid design, geometric shapes).</li> <li>Backend (Go) Development: 10%. I have a handle on this, but I’ll be pausing this work for a bit to focus on 2️⃣ and 4️⃣ first.</li> <li>Client (Flutter) Progress: 0%. Waiting for 1️⃣ &amp; 2️⃣ to be completed, and in the meantime, I’ll be learning some Flutter~</li> </ol> <p>I expect to focus on 1️⃣ and 2️⃣ over the next few days.</p> <p>If you meet the following criteria, feel free to reach out:</p> <ol> <li>Can persevere</li> <li>Has dreams</li> <li>Is interested</li> </ol>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[Day3️⃣]]></summary></entry><entry><title type="html">[Iter-X] 2/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-2-100/" rel="alternate" type="text/html" title="[Iter-X] 2/100days"/><published>2025-02-18T15:59:59+00:00</published><updated>2025-02-18T15:59:59+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-2-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-2-100/"><![CDATA[<p>Day2️⃣</p> <p>I saw something really interesting on HN today—it’s a way to display your life by weeks, marking significant events. Since there are only 5,215 weeks in 100 years (100*365/7=5215), it provides a simple way to showcase key moments in life. I thought it was really cool.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster1.2025-02-18_11-16-30-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster1.2025-02-18_11-16-30-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster1.2025-02-18_11-16-30-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster1.2025-02-18_11-16-30.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster2.2025-02-18_11-17-24-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster2.2025-02-18_11-17-24-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster2.2025-02-18_11-17-24-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster2.2025-02-18_11-17-24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> MyLifeInWeeks: Buster 1 &amp; 2 </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster3.2025-02-18_11-17-32-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster3.2025-02-18_11-17-32-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster3.2025-02-18_11-17-32-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Buster3.2025-02-18_11-17-32.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina1.2025-02-18_11-14-55-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina1.2025-02-18_11-14-55-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina1.2025-02-18_11-14-55-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina1.2025-02-18_11-14-55.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> MyLifeInWeeks: Buster 3 &amp; Gina 1 </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina2.2025-02-18_11-15-07-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina2.2025-02-18_11-15-07-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina2.2025-02-18_11-15-07-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina2.2025-02-18_11-15-07.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina3.2025-02-18_11-15-16-480.webp 480w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina3.2025-02-18_11-15-16-800.webp 800w,/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina3.2025-02-18_11-15-16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-19-iter-x-2-100/MyLifeInWeeks-Gina3.2025-02-18_11-15-16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> MyLifeInWeeks: Gina 2 &amp; 3 </div> <p>My first thought was that I want to integrate this into an app! I hope to use this to show the travel moments of your life, with map visualizations that can easily evoke memories. It’s like how people enjoy “lighting up” maps; I think it’s a similar purpose.</p> <p>Today🥚, here’s a summary of the current situation:</p> <ol> <li>Prototype Design: 1%. I have some ideas now, but it will still progress alongside item 2️⃣.</li> <li>UI/UX Design: 1%. It’s started, but there are no substantial results yet. I had a chat with some designers about the color scheme and came up with some key terms (minimalist design, flat design, contrasting colors, Morandi color palette, high saturation, Memphis design, acid design, geometric shapes).</li> <li>Backend (Go) Development: 10%. I have a handle on this, but I’ll be pausing this work for a bit to focus on 2️⃣ and 4️⃣ first.</li> <li>Client (Flutter) Progress: 0%. Waiting for 1️⃣ &amp; 2️⃣ to be completed, and in the meantime, I’ll be learning some Flutter~</li> </ol> <p>I expect to focus on 1️⃣ and 2️⃣ over the next few days.</p> <p>If you meet the following criteria, feel free to reach out:</p> <ol> <li>Can persevere</li> <li>Has dreams</li> <li>Is interested</li> </ol> <p>References:</p> <ul> <li><a href="https://weeks.ginatrapani.org/">https://weeks.ginatrapani.org/</a></li> <li><a href="https://busterbenson.com/life-in-weeks">https://busterbenson.com/life-in-weeks</a></li> <li><a href="https://waitbutwhy.com/2014/05/life-weeks.html">https://waitbutwhy.com/2014/05/life-weeks.html</a></li> <li><a href="https://www.weeksofyour.life/">https://www.weeksofyour.life/</a></li> <li><a href="https://github.com/ginatrapani/life-in-weeks">https://github.com/ginatrapani/life-in-weeks</a></li> </ul>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[Day2️⃣]]></summary></entry><entry><title type="html">[Iter-X] 1/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-1-100/" rel="alternate" type="text/html" title="[Iter-X] 1/100days"/><published>2025-02-17T15:59:59+00:00</published><updated>2025-02-17T15:59:59+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-1-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-1-100/"><![CDATA[<p>Day1️⃣</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide1.2025-02-18_00-14-45-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide1.2025-02-18_00-14-45-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide1.2025-02-18_00-14-45-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide1.2025-02-18_00-14-45.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Slides 1 </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide2.2025-02-18_00-15-05-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide2.2025-02-18_00-15-05-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide2.2025-02-18_00-15-05-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide2.2025-02-18_00-15-05.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide3.2025-02-18_00-15-20-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide3.2025-02-18_00-15-20-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide3.2025-02-18_00-15-20-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide3.2025-02-18_00-15-20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Slides 2 &amp; 3 </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide4.2025-02-18_00-15-36-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide4.2025-02-18_00-15-36-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide4.2025-02-18_00-15-36-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide4.2025-02-18_00-15-36.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide5.2025-02-18_00-15-44-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide5.2025-02-18_00-15-44-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide5.2025-02-18_00-15-44-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide5.2025-02-18_00-15-44.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Slides 4 &amp; 5 </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide6.2025-02-18_00-15-58-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide6.2025-02-18_00-15-58-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide6.2025-02-18_00-15-58-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide6.2025-02-18_00-15-58.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-17-iter-x-1-100/Slide7.2025-02-18_00-16-05-480.webp 480w,/assets/img/2025-02-17-iter-x-1-100/Slide7.2025-02-18_00-16-05-800.webp 800w,/assets/img/2025-02-17-iter-x-1-100/Slide7.2025-02-18_00-16-05-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2025-02-17-iter-x-1-100/Slide7.2025-02-18_00-16-05.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Slides 6 &amp; 7 </div> <p>Today has been a bit busy, and by the time I wrote this, it was already 12:30 AM. But I still pushed through to finish a simple slide. It’s still far from the business plan (BP) and roadshow PPT, but the focus is on conveying some ideas and design concepts.</p> <p>Here’s a summary of the current situation:</p> <ol> <li>Prototype Design: 1%. I have some ideas now, but it will still progress alongside item 2️⃣.</li> <li>UI/UX Design: 1%. It’s started, but there are no substantial results yet. I had a chat with some designers about the color scheme and came up with some key terms (minimalist design, flat design, contrasting colors, Morandi color palette, high saturation, Memphis design, acid design, geometric shapes).</li> <li>Backend (Go) Development: 10%. I have a handle on this, but I’ll be pausing this work for a bit to focus on 2️⃣ and 4️⃣ first.</li> <li>Client (Flutter) Progress: 0%. Waiting for 1️⃣ &amp; 2️⃣ to be completed, and in the meantime, I’ll be learning some Flutter~</li> </ol> <p>I expect to focus on 1️⃣ and 2️⃣ over the next few days.</p> <p>If you meet the following criteria, feel free to reach out:</p> <ol> <li>Can persevere</li> <li>Has dreams</li> <li>Is interested</li> </ol>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[Day1️⃣]]></summary></entry><entry><title type="html">[Iter-X] 0/100days</title><link href="https://ifuryst.github.io/blog/2025/iter-x-0-100/" rel="alternate" type="text/html" title="[Iter-X] 0/100days"/><published>2025-02-16T15:28:27+00:00</published><updated>2025-02-16T15:28:27+00:00</updated><id>https://ifuryst.github.io/blog/2025/iter-x-0-100</id><content type="html" xml:base="https://ifuryst.github.io/blog/2025/iter-x-0-100/"><![CDATA[<p>As someone passionate about development, creation, and travel, I believe the intersection of interests is a great opportunity for innovation.</p> <p>After a period of reflection and thought, I’ve decided to start documenting the birth of my new travel app product from today. I hope to meet some friends and even like-minded partners along the way.</p> <p>Day0️⃣</p> <p>Summary of the current situation:</p> <ol> <li>Product’s English name, product concept, key features, and MVP goals have been initially defined.</li> <li>Some back-end (Go) API development completed (authentication + main itinerary).</li> <li>Client-side (Flutter) progress: 0%.</li> <li>Conceptualized some prototypes, color scheme, and UI design.</li> </ol> <p>I plan to share a project introduction PPT tomorrow.</p> <p>Currently, we are lacking:</p> <ol> <li>Flutter development partners.</li> <li>UI designers with some UX knowledge.</li> </ol> <p>If you think you meet the following conditions, feel free to reach out:</p> <ol> <li>Persistent.</li> <li>Dream-driven.</li> <li>Interested.</li> </ol> <p>Currently, we are all working part-time and are not looking for full-time team members. We are unable to provide any material compensation at this stage.</p>]]></content><author><name></name></author><category term="products"/><category term="products"/><summary type="html"><![CDATA[As someone passionate about development, creation, and travel, I believe the intersection of interests is a great opportunity for innovation.]]></summary></entry><entry><title type="html">Unified Git Management for Multiple Git Repositories</title><link href="https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories/" rel="alternate" type="text/html" title="Unified Git Management for Multiple Git Repositories"/><published>2024-11-11T15:08:27+00:00</published><updated>2024-11-11T15:08:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/unified-git-management-for-multiple-git-repositories/"><![CDATA[<p>I usually deal with many projects, during this time I will encounter Git-related configuration management issues. In the past, I manually managed them, and sometimes I missed them. Now I have too many projects to handle, including the open-source projects. It is very troublesome to manage them manually. I looked at Git and found that it supports configuration based on the path.</p> <h2 id="git-configuration-source">Git Configuration Source</h2> <p>In general, Git reads configuration from these sources (from low to high priority):</p> <ol> <li>System-level (system) configuration: <code class="language-plaintext highlighter-rouge">/etc/gitconfig</code></li> <li>User-level (global) configuration: <code class="language-plaintext highlighter-rouge">~/.gitconfig</code></li> <li>Repository-level (local) configuration: <code class="language-plaintext highlighter-rouge">.git/config</code> in the project</li> </ol> <h2 id="configuration-commands">Configuration Commands</h2> <p>In general, we will use 2 and 3 more, that is, user-level global configuration and single repository-level configuration, which correspond to the following commands</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Global configuration</span>
git config <span class="nt">--global</span> <span class="nt">--list</span>
<span class="c"># Configure username</span>
git config <span class="nt">--global</span> user.name <span class="s1">'fake-name'</span>
<span class="c"># Configure email</span>
git config <span class="nt">--global</span> user.email <span class="s1">'fake@email.com'</span>
<span class="c"># Configure GPG key ID</span>
git config <span class="nt">--global</span> user.signingkey ABC123PGPKEYID

<span class="c"># Repository-level configuration</span>
git config <span class="nt">--list</span>
<span class="c"># Configure username</span>
git config user.name <span class="s1">'fake-name'</span>
<span class="c"># Configure email</span>
git config user.email <span class="s1">'fake@email.com'</span>
<span class="c"># Configure GPG key ID</span>
git config user.signingkey ABC123PGPKEYID
</code></pre></div></div> <h2 id="unified-configuration">Unified Configuration</h2> <p>The above commands can be used to temporarily deal with temporary or separate settings for some repositories, but for the global level, we do not want to repeat the configuration every time we pull or start a new repository, which is very annoying, and the key point is that we often forget. Therefore, a one-time method is to configure according to the hierarchical configuration, and make the configuration in the global level, my personal habit is to divide different organizational projects according to the directory, and do not interfere with each other</p> <p>For example, we have two different directories that contain various projects:</p> <ol> <li><code class="language-plaintext highlighter-rouge">/path/to/github/</code> contains some projects in the open-source community</li> <li><code class="language-plaintext highlighter-rouge">/path/to/fake-org/</code> contains projects in an organization</li> </ol> <p>At this time, we can configure it in <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> like this</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>includeIf <span class="s2">"gitdir:/path/to/github/"</span><span class="o">]</span>
    path <span class="o">=</span> /path/to/.gitconfig.github

<span class="o">[</span>includeIf <span class="s2">"gitdir:/path/to/fake-org/"</span><span class="o">]</span>
    path <span class="o">=</span> /path/to/.gitconfig.fake-org
</code></pre></div></div> <p>In this way, we can use two different git configurations for projects in these two directories</p> <p>For example, the configuration of <code class="language-plaintext highlighter-rouge">.gitconfig.github</code> is</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"leo"</span>
    email <span class="o">=</span> <span class="s2">"my@email.com"</span>
    signingkey <span class="o">=</span> <span class="s2">"ABC123"</span>
</code></pre></div></div> <p>And the configuration of <code class="language-plaintext highlighter-rouge">.gitconfig.fake-org</code> is</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>user]
    name <span class="o">=</span> <span class="s2">"fake-name"</span>
    email <span class="o">=</span> <span class="s2">"fake@email.com"</span>
    signingkey <span class="o">=</span> <span class="s2">"ABC456"</span>
</code></pre></div></div> <p>In this way, we can solve the problem of different Git configurations for multiple projects once and for all</p> <h2 id="references">References</h2> <ul> <li><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt---global">https://git-scm.com/docs/git-config#Documentation/git-config.txt—global</a></li> </ul>]]></content><author><name></name></author><category term="DevOps"/><category term="Git"/><summary type="html"><![CDATA[I usually deal with many projects, during this time I will encounter Git-related configuration management issues. In the past, I manually managed them, and sometimes I missed them. Now I have too many projects to handle, including the open-source projects. It is very troublesome to manage them manually. I looked at Git and found that it supports configuration based on the path.]]></summary></entry><entry><title type="html">GOMAXPROCS: Limiting CPU Cores in Go and Performance Optimization in Containerized Environments</title><link href="https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers/" rel="alternate" type="text/html" title="GOMAXPROCS: Limiting CPU Cores in Go and Performance Optimization in Containerized Environments"/><published>2024-11-06T13:08:27+00:00</published><updated>2024-11-06T13:08:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/gomaxprocs-optimizing-go-performance-in-containers/"><![CDATA[<p>I’ve met an interesting problem recently. When limiting CPU resources in Cgroups, setting the number of available cores may cause some performance differences. Therefore, I explored this issue.</p> <h2 id="whats-gomaxprocs">What’s GOMAXPROCS?</h2> <p>GOAMXPROCS is a method in the runtime package. Let’s see the official introduction:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// GOMAXPROCS sets the maximum number of CPUs that can be executing</span>
<span class="c">// simultaneously and returns the previous setting. It defaults to</span>
<span class="c">// the value of [runtime.NumCPU]. If n &lt; 1, it does not change the current setting.</span>
<span class="c">// This call will go away when the scheduler improves.</span>
<span class="k">func</span> <span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{}</span>
</code></pre></div></div> <p>In simple terms, it is used to set the number of CPU cores that Go programs can use. By default, the program uses all cores (the value obtained by <code class="language-plaintext highlighter-rouge">runtime.NumCPU</code>).</p> <h2 id="whats-the-use-of-gomaxprocs">What’s the Use of GOMAXPROCS?</h2> <p>In actual use, <code class="language-plaintext highlighter-rouge">runtime.GOMAXPROCS</code> is mostly used to control the concurrency of the entire program (or resource consumption). When set to a large value, the program can naturally run more goroutines, and vice versa will limit the number of goroutines at the same time.</p> <p>Through this, we can control resource consumption in some scenarios, such as some sensitive devices or small instances. Especially for containerized scenarios dominated by Kubernetes, we usually control the resources of a single instance and then cooperate with multiple instances to achieve the purpose of cutting computing power or disaster recovery.</p> <h2 id="specific-problems">Specific Problems</h2> <p>In general, you may not encounter significant problems (or may not notice this problem), but in some scenarios such as high concurrency, focusing on latency (P50, P99, etc.), throughput scenarios, it is very likely to be affected.</p> <p>The specific problem is that when limiting the CPU through Cgroups, there may be this problem. Especially now that many services are started through Kubernetes and Docker, in the container environment, the external may limit the maximum CPU and memory. In this case, it may be possible to achieve lower actual efficiency than doing appropriate restrictions when the resources are fully utilized.</p> <p>Let’s take a look step by step. We pull a container first:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">it</span> <span class="o">--</span><span class="n">rm</span> <span class="o">--</span><span class="n">cpus</span><span class="o">=</span><span class="s">"2"</span> <span class="o">-</span><span class="n">m</span> <span class="m">512</span><span class="n">m</span> <span class="n">golang</span><span class="o">:</span><span class="m">1.23</span><span class="o">-</span><span class="n">bullseye</span> <span class="n">bash</span>
</code></pre></div></div> <p>You can see that we limit the usage to 2 cores and 512M. Let’s go into the container to see:</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cpu_in_container.2024-11-06_16-34-04.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> CPU and Memory in Container </div> <p>You can see that the CPU and memory are still read from the actual size of the host. At the same time, let’s take a look at Cgroups:</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/cgroups_in_container.2024-11-06_16-40-12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Cgroups in Container </div> <p>You can see that Cgroups are indeed set. In this case, 200000/100000=2 cores.</p> <p>Let’s run a Go program to see:</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_demo.2024-11-06_16-37-08.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> GOMAXPROCS Demo </div> <p>You can see that the actual number of cores obtained is 12. In this case, if we set the maximum available to 12, the actual performance will be lower than if we set it to 2.</p> <h2 id="the-solution">The Solution</h2> <p>The most direct solution is to unify with the corresponding external restrictions, which can be done directly through configuration, which may be too rigid, not suitable, or not flexible in some cases.</p> <p>If it is a Cgroups-like situation that needs to be read dynamically, you need to read the Cgroups configuration. Cgroups v1 and v2 have some differences. Fortunately, there are corresponding solutions. Uber’s <a href="https://github.com/uber-go/automaxprocs">automaxprocs</a> has adapted to read Cgroups v1 and v2 configurations. It only supports Linux. (I will talk about Cgroups in the future, and I won’t go into it here.)</p> <p>It is worth mentioning that Uber open-sourced this simple tool because they encountered this problem in the production environment, affecting P50, P99, etc.</p> <h2 id="walkthrough">Walkthrough</h2> <p>Next, let’s observe the whole phenomenon through code.</p> <p>I made a demo to demonstrate this result. For specific code, see: <a href="https://github.com/iFurySt/GoMaxProcsBench">GoMaxProcsBench</a></p> <p>Let’s take a look at <code class="language-plaintext highlighter-rouge">cmd/bench/main.go</code>. The complete code is as follows:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"flag"</span>
	<span class="s">"fmt"</span>
	<span class="s">"go.uber.org/automaxprocs/maxprocs"</span>
	<span class="s">"log"</span>
	<span class="s">"os"</span>
	<span class="s">"os/signal"</span>
	<span class="s">"runtime"</span>
	<span class="s">"sync/atomic"</span>
	<span class="s">"syscall"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">n</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>   <span class="kt">int</span>
	<span class="n">ts</span>     <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">silent</span> <span class="kt">bool</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">silent</span><span class="p">,</span> <span class="s">"silent"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"silent mode"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Printf</span><span class="p">(</span><span class="s">"mode: %d, ts: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">ts</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">runtime</span><span class="o">.</span><span class="n">NumCPU</span><span class="p">())</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"GOMAXPROCS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">maxprocs</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">maxprocs</span><span class="o">.</span><span class="n">Logger</span><span class="p">(</span><span class="n">Printf</span><span class="p">))</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="p">(</span>
		<span class="n">st</span>     <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
		<span class="n">count</span>  <span class="n">atomic</span><span class="o">.</span><span class="n">Int64</span>
		<span class="n">sigs</span>   <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
		<span class="n">ctx</span>    <span class="n">context</span><span class="o">.</span><span class="n">Context</span>
		<span class="n">cancel</span> <span class="n">context</span><span class="o">.</span><span class="n">CancelFunc</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">ctx</span><span class="p">,</span> <span class="n">cancel</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithTimeout</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">ts</span><span class="p">)</span>
		<span class="k">defer</span> <span class="n">cancel</span><span class="p">()</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
	<span class="p">}</span>

	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">sigs</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGKILL</span><span class="p">)</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"count: %d, time: %v, qps: %.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">(),</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">),</span>
			<span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">sigs</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">default</span><span class="o">:</span>
			<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
				<span class="n">_</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
				<span class="n">count</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
			<span class="p">}()</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">Printf</span><span class="p">(</span><span class="n">format</span> <span class="kt">string</span><span class="p">,</span> <span class="n">v</span> <span class="o">...</span><span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">v</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>The overall logic is simple. Let’s look at it from top to bottom.</p> <p>We use a Fibonacci to simulate a time-consuming calculation task:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">n</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="m">2</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>We define several parameters:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>   <span class="kt">int</span>
	<span class="n">ts</span>     <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">silent</span> <span class="kt">bool</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">BoolVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">silent</span><span class="p">,</span> <span class="s">"silent"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"silent mode"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div> <p>We use <code class="language-plaintext highlighter-rouge">flag</code> to parse the parameters. We have three parameters: <code class="language-plaintext highlighter-rouge">mode</code> to specify whether to use <code class="language-plaintext highlighter-rouge">runtime.GOMAXPROCS</code> or <code class="language-plaintext highlighter-rouge">automaxprocs/maxprocs</code>.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">Printf</span><span class="p">(</span><span class="s">"mode: %d, ts: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">ts</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="n">runtime</span><span class="o">.</span><span class="n">NumCPU</span><span class="p">())</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"GOMAXPROCS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">runtime</span><span class="o">.</span><span class="n">GOMAXPROCS</span><span class="p">(</span><span class="m">0</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">maxprocs</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">maxprocs</span><span class="o">.</span><span class="n">Logger</span><span class="p">(</span><span class="n">Printf</span><span class="p">))</span>
	<span class="p">}</span>
</code></pre></div></div> <p>If <code class="language-plaintext highlighter-rouge">mode</code> is 1, we use <code class="language-plaintext highlighter-rouge">runtime.GOMAXPROCS</code> to set the number of cores to the number of CPUs. If <code class="language-plaintext highlighter-rouge">mode</code> is 0, we use <code class="language-plaintext highlighter-rouge">maxprocs.Set</code> to set the number of cores.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">var</span> <span class="p">(</span>
		<span class="n">st</span>     <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
		<span class="n">count</span>  <span class="n">atomic</span><span class="o">.</span><span class="n">Int64</span>
		<span class="n">sigs</span>   <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
		<span class="n">ctx</span>    <span class="n">context</span><span class="o">.</span><span class="n">Context</span>
		<span class="n">cancel</span> <span class="n">context</span><span class="o">.</span><span class="n">CancelFunc</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">ctx</span><span class="p">,</span> <span class="n">cancel</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithTimeout</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">ts</span><span class="p">)</span>
		<span class="k">defer</span> <span class="n">cancel</span><span class="p">()</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">ctx</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
	<span class="p">}</span>
</code></pre></div></div> <p>We set up a signal channel to listen for signals. When no time is specified, you can use Ctrl+C to stop the program.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">sigs</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGKILL</span><span class="p">)</span>
	<span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Printf</span><span class="p">(</span><span class="s">"count: %d, time: %v, qps: %.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">(),</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">),</span>
			<span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="k">if</span> <span class="n">silent</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%.0f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="kt">float64</span><span class="p">(</span><span class="n">count</span><span class="o">.</span><span class="n">Load</span><span class="p">())</span><span class="o">/</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">st</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
		<span class="p">}</span>
	<span class="p">}()</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">select</span> <span class="p">{</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">case</span> <span class="o">&lt;-</span><span class="n">sigs</span><span class="o">:</span>
			<span class="k">return</span>
		<span class="k">default</span><span class="o">:</span>
			<span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
				<span class="n">_</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
				<span class="n">count</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
			<span class="p">}()</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div> <p>We start a goroutine to run the Fibonacci calculation. We use <code class="language-plaintext highlighter-rouge">count</code> to count the number of calculations. We use <code class="language-plaintext highlighter-rouge">time.Since</code> to calculate the time and print the QPS.</p> <p>Let’s run it to see. You can directly bring up a container through the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> in the repo to test. It is already configured.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
docker compose <span class="nb">exec </span>golang bash
</code></pre></div></div> <p>We run the two modes separately for 5 seconds:</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/bench.2024-11-06_17-33-16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Bench for GOMAXPROCS and AUTOMAXPROCS </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/bench/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0
2024/11/06 09:32:45 mode: 0, ts: 5s
2024/11/06 09:32:45 maxprocs: Updating <span class="nv">GOMAXPROCS</span><span class="o">=</span>2: determined from CPU quota
2024/11/06 09:32:50 count: 15323801, <span class="nb">time</span>: 5.000015461s, qps: 3064751
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/bench/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1
2024/11/06 09:32:51 mode: 1, ts: 5s
2024/11/06 09:32:51 GOMAXPROCS: 12
2024/11/06 09:32:56 count: 8984694, <span class="nb">time</span>: 5.001722252s, qps: 1796320
</code></pre></div></div> <p>As we can see, as analyzed earlier, one uses 2 cores and the other uses 12 cores to run. The program will print the number of times the Fibonacci is run and the total time consumed, and then print the QPS. A single run cannot represent the overall situation. I added a tool to run multiple times to calculate the result. We can run the result through <code class="language-plaintext highlighter-rouge">cmd/stats/main.go</code>:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"flag"</span>
	<span class="s">"fmt"</span>
	<span class="s">"log"</span>
	<span class="s">"os/exec"</span>
	<span class="s">"strconv"</span>
	<span class="s">"strings"</span>
	<span class="s">"time"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">mode</span>  <span class="kt">int</span>
	<span class="n">ts</span>    <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
	<span class="n">times</span> <span class="kt">int</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mode</span><span class="p">,</span> <span class="s">"mode"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"0: auto, 1: runtime"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">DurationVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ts</span><span class="p">,</span> <span class="s">"ts"</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="s">"time to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">IntVar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">times</span><span class="p">,</span> <span class="s">"times"</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="s">"times to run"</span><span class="p">)</span>
	<span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">total</span> <span class="kt">int64</span> <span class="o">=</span> <span class="m">0</span>
	<span class="n">cnt</span> <span class="o">:=</span> <span class="m">0</span>
	<span class="k">for</span> <span class="k">range</span> <span class="n">times</span> <span class="p">{</span>
		<span class="n">cmd</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"run"</span><span class="p">,</span> <span class="s">"cmd/bench/main.go"</span><span class="p">,</span>
			<span class="s">"--silent"</span><span class="p">,</span> <span class="s">"-mode"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprint</span><span class="p">(</span><span class="n">mode</span><span class="p">),</span> <span class="s">"-ts"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprint</span><span class="p">(</span><span class="n">ts</span><span class="o">.</span><span class="n">String</span><span class="p">()))</span>

		<span class="n">output</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">cmd</span><span class="o">.</span><span class="n">CombinedOutput</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to execute command: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="n">qps</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">ParseInt</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">TrimSpace</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">output</span><span class="p">)),</span> <span class="m">10</span><span class="p">,</span> <span class="m">64</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to parse output: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="n">total</span> <span class="o">+=</span> <span class="n">qps</span>
		<span class="n">cnt</span><span class="o">++</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">cnt</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Average QPS: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">total</span><span class="o">/</span><span class="kt">int64</span><span class="p">(</span><span class="n">cnt</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"No valid result</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can run it to see the result(10 times here):</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/stats.2024-11-06_17-40-44.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> Stats for GOMAXPROCS and AUTOMAXPROCS </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0 <span class="nt">--times</span> 10
2024/11/06 09:36:29 Average QPS: 3010903
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1 <span class="nt">--times</span> 10
2024/11/06 09:37:33 Average QPS: 2408036
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 0 <span class="nt">--times</span> 10
2024/11/06 09:38:41 Average QPS: 2896338
root@da9d799578df:/go/src/GoMaxProcsBench# go run cmd/stats/main.go <span class="nt">--ts</span> 5s <span class="nt">--mode</span> 1 <span class="nt">--times</span> 10
2024/11/06 09:40:25 Average QPS: 2364868
</code></pre></div></div> <p>You can see the difference in QPS between the two modes. In this case, there is an estimated loss of about 20%.</p> <p>At this time, if you look at the CPU usage of the container, you can see that the CPU usage limited to 2 cores is less, about 180%, while the CPU usage limited to 12 cores is higher, about 200%-210%.</p> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/gomaxprocs_cpu_usage.2024-11-06_17-36-34.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> GOMAXPROCS CPU Usage </div> <div class="row mt-3"> <div class="col-sm mt-0 mb-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-480.webp 480w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-800.webp 800w,/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-11-06-gomaxprocs-optimizing-go-performance-in-containers/automaxprocs_cpu_usage.2024-11-06_17-37-06.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption mt-0"> AUTOMAXPROCS CPU Usage </div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CONTAINER ID   NAME                       CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS
da9d799578df   gomaxprocsbench-golang-1   183.19%   113.3MiB / 200MiB     56.65%    69kB / 3.29kB     135MB / 195MB     53
da9d799578df   gomaxprocsbench-golang-1   210.74%   80.86MiB / 200MiB     40.43%    69kB / 3.29kB     135MB / 195MB     69
</code></pre></div></div> <h2 id="conclusion">Conclusion</h2> <p>We may not notice this problem in normal development. Like me, I often think that it is very safe to set the restrictions through Cgroups at the container level, and I think it is very safe. From a certain perspective, it is not wrong. It is just that I did not notice that under high CPU usage, it may cause performance degradation due to incorrect configuration.</p> <p>An interesting exploration. In the usual R&amp;D process, many issues go unnoticed. It’s only when we pursue extreme conditions and dig into performance losses that we begin to recognize these problems. But it’s often these very issues that become the greatest boosters on the road to progress. Ironically, without continuous learning and growth, ten years of coding could end up feeling like the same year repeated ten times—only to be outpaced by an LLM in seconds. 🤖</p> <h2 id="references">References</h2> <ul> <li><a href="https://github.com/uber-go/automaxprocs">https://github.com/uber-go/automaxprocs</a></li> <li><a href="https://github.com/iFurySt/GoMaxProcsBench">https://github.com/iFurySt/GoMaxProcsBench</a></li> </ul>]]></content><author><name></name></author><category term="Coding"/><category term="Go"/><summary type="html"><![CDATA[I’ve met an interesting problem recently. When limiting CPU resources in Cgroups, setting the number of available cores may cause some performance differences. Therefore, I explored this issue.]]></summary></entry><entry><title type="html">Reflections on China’s Drinking Culture</title><link href="https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture/" rel="alternate" type="text/html" title="Reflections on China’s Drinking Culture"/><published>2024-10-30T15:47:27+00:00</published><updated>2024-10-30T15:47:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/reflections-on-chinas-drinking-culture/"><![CDATA[<p>Drinking like a bull might be a common stereotype, but it actually fits pretty well with reality.</p> <p>In China, when it comes to drinking culture, we’re not just chugging down alcohol – we’re also sipping on human connections and, often, business interests. It’s just a plain, neutral observation – no praise, no criticism.</p> <p>Take my area, for example. At the table, the host usually sits facing the entrance in the center. That way, they catch everyone who walks in first, and anyone entering will naturally notice the person sitting right across from them in the middle. Makes sense, right? Typically, whoever’s seated there is footing the bill. Pay attention next time, you’ll notice.</p> <p>There’s usually a “drinking ritual” at the table, something like an initiation process, where everyone actively toasts each other, individually. There are two essential rules:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>•	It’s on you to initiate.
•	And you’ve got to drink.
</code></pre></div></div> <p>Generally, you start from your left or right and make your way around. It doesn’t count if someone else initiates with you. I don’t know where this tradition started, but there’s a certain logic to it. If someone comes to you for a drink, you’re likely to notice them. So, making the rounds and initiating a toast with everyone creates a chance to connect, signaling that you value them enough to raise a glass.</p> <p>Now, a lot of folks don’t exactly love China’s drinking culture, and fair enough. It’s a bit like that saying, “Just look at the glasses on the table – every toast goes to the wealthiest.” It’s pretty telling about human nature. The drinking scene reflects social hierarchy like a mini society at a table. You can see why some people feel uncomfortable – it’s that hierarchy pushing down on them.</p> <p>There are, of course, high-end gatherings where things are more refined, but drinking culture often mirrors broader social dynamics. There’s an odd connection between the society you’re part of and the drinking culture you find yourself in. It’s no wonder that many people feel a natural aversion to it. That said, everything has two sides, and within limits, everyone has a choice. Maybe one of the main reasons we keep hustling is to have a few more of those choices.</p> <p>People have desires, thoughts, and the drive to choose their path. If you’re clear on your choices and can own them, then no matter if the situation is good or bad, you’ll be able to handle it with more ease. In the end, it all boils down to heart and confidence. 🍺</p>]]></content><author><name></name></author><category term="opinions"/><category term="thoughts"/><summary type="html"><![CDATA[Drinking like a bull might be a common stereotype, but it actually fits pretty well with reality.]]></summary></entry><entry><title type="html">Resolving Option-Key Hotkey Issues in macOS Sequoia(15.0.1)</title><link href="https://ifuryst.github.io/blog/2024/resolving-option-key-hotkey-issues-in-macos-sequoia/" rel="alternate" type="text/html" title="Resolving Option-Key Hotkey Issues in macOS Sequoia(15.0.1)"/><published>2024-10-17T14:00:27+00:00</published><updated>2024-10-17T14:00:27+00:00</updated><id>https://ifuryst.github.io/blog/2024/resolving-option-key-hotkey-issues-in-macos-sequoia</id><content type="html" xml:base="https://ifuryst.github.io/blog/2024/resolving-option-key-hotkey-issues-in-macos-sequoia/"><![CDATA[<h1 id="background">Background</h1> <p>The MacOS Sequoia(15.0.1) will let the <code class="language-plaintext highlighter-rouge">Option+*</code> or <code class="language-plaintext highlighter-rouge">Option+Shift+*</code> no longer work. I believe a lot of guys like me use this to custom hotkeys or shortcuts.</p> <p>Apple’s official answer is that <a href="https://developer.apple.com/forums/thread/763878?answerId=804374022#804374022">this was an intentional change</a> for security purposes. We can see the discussion on <a href="https://www.reddit.com/r/macapps/comments/1fjpiiw/psa_macos_15_breaks_optionkey_hotkeys/">Reddit</a>. I don’t want to judge it here, just to provide a solution(or maybe a band-aid solution for someone or some situation.) to mitigate the issue.</p> <h1 id="solution-hammerspoon-and-retrigger-hotkey">Solution: Hammerspoon and retrigger hotkey</h1> <p>In the beginning, Thanks for <a href="https://www.reddit.com/r/macapps/comments/1fjpiiw/comment/lolslnm/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button">danrnx</a>’s reply, which enlightened me.</p> <p>My solution is using the <a href="https://www.hammerspoon.org/">Hammerspoon</a>, which is an alternative to the Keyboard Maestro to some extent.</p> <h2 id="installation">Installation</h2> <p>Here is a step-by-step tutorial:</p> <ol> <li>Install the Hammerspoon from release or brew. You can reference it <a href="https://github.com/Hammerspoon/hammerspoon?tab=readme-ov-file#how-do-i-install-it">here</a>.</li> <li>Write the lua(a programming language) for <code class="language-plaintext highlighter-rouge">~/.hammerspoon/init.lua</code>. You can reference the official guidance <a href="https://www.hammerspoon.org/go/">here</a>. I’ll give some examples below.</li> </ol> <h2 id="configuration">Configuration</h2> <p>Remember to Reload Config after you change the <code class="language-plaintext highlighter-rouge">~/.hammerspoon/init.lua</code> .</p> <h3 id="demo-1-open-or-gain-focus-on-an-app">Demo 1: Open or gain focus on an App</h3> <p>It works well if you just need to define a hotkey to open or focus on an app.</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Define the hotkey for Option+C to gain an app's focus.</span>
<span class="n">hs</span><span class="p">.</span><span class="n">hotkey</span><span class="p">.</span><span class="n">bind</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">},</span> <span class="s2">"C"</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">currentApp</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">frontmostApplication</span><span class="p">()</span>

  <span class="k">if</span> <span class="n">currentApp</span><span class="p">:</span><span class="n">name</span><span class="p">()</span> <span class="o">==</span> <span class="s2">"Google Chrome"</span> <span class="k">then</span>
    <span class="c1">-- Don't alert if already gained the focus.</span>
    <span class="k">return</span>
  <span class="k">else</span>
    <span class="n">hs</span><span class="p">.</span><span class="n">alert</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="s2">"Chrome"</span><span class="p">)</span>
    <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">launchOrFocus</span><span class="p">(</span><span class="s2">"Google Chrome"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span><span class="p">)</span>
</code></pre></div></div> <p>The following is an improved and more practical version of the above:</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">getBundleID</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">app</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">app</span> <span class="k">then</span>
    <span class="k">return</span> <span class="n">app</span><span class="p">:</span><span class="n">bundleID</span><span class="p">()</span>
  <span class="k">else</span>
    <span class="c1">-- If the application is not running, get it through the application path</span>
    <span class="kd">local</span> <span class="n">appPath</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">pathForBundleID</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">appPath</span> <span class="k">then</span>
      <span class="k">return</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">infoForBundlePath</span><span class="p">(</span><span class="n">appPath</span><span class="p">).</span><span class="n">CFBundleIdentifier</span>
    <span class="k">else</span>
      <span class="n">hs</span><span class="p">.</span><span class="n">alert</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="s2">"Application not found: "</span> <span class="o">..</span> <span class="n">appName</span><span class="p">)</span>
      <span class="k">return</span> <span class="kc">nil</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="c1">-- A generic function to bind hotkeys and handle application launches or focus</span>
<span class="k">function</span> <span class="nf">bindAppHotkey</span><span class="p">(</span><span class="n">modifiers</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">appName</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">bundleID</span> <span class="o">=</span> <span class="n">getBundleID</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span>

  <span class="k">if</span> <span class="ow">not</span> <span class="n">bundleID</span> <span class="k">then</span>
    <span class="k">return</span>
  <span class="k">end</span>

  <span class="n">hs</span><span class="p">.</span><span class="n">hotkey</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="n">modifiers</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">currentApp</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">frontmostApplication</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">currentApp</span><span class="p">:</span><span class="n">bundleID</span><span class="p">()</span> <span class="o">==</span> <span class="n">bundleID</span> <span class="k">then</span>
      <span class="k">return</span>
    <span class="k">else</span>
      <span class="kd">local</span> <span class="n">appIcon</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">imageFromAppBundle</span><span class="p">(</span><span class="n">bundleID</span><span class="p">)</span>

      <span class="c1">-- Create a canvas to display the icon</span>
      <span class="kd">local</span> <span class="n">iconCanvas</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">new</span><span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">100</span> <span class="p">}:</span><span class="n">appendElements</span><span class="p">({</span>
        <span class="nb">type</span> <span class="o">=</span> <span class="s2">"image"</span><span class="p">,</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">appIcon</span><span class="p">,</span>
        <span class="n">imageAlignment</span> <span class="o">=</span> <span class="s2">"center"</span><span class="p">,</span>
        <span class="n">imageScaling</span> <span class="o">=</span> <span class="s2">"scaleToFit"</span>
      <span class="p">})</span>

      <span class="c1">-- Get the screen center position to display the canvas</span>
      <span class="kd">local</span> <span class="n">screenFrame</span> <span class="o">=</span> <span class="n">hs</span><span class="p">.</span><span class="n">screen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">():</span><span class="n">frame</span><span class="p">()</span>
      <span class="n">iconCanvas</span><span class="p">:</span><span class="n">frame</span><span class="p">({</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">screenFrame</span><span class="p">.</span><span class="n">w</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">50</span><span class="p">,</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">screenFrame</span><span class="p">.</span><span class="n">h</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">50</span><span class="p">,</span>
        <span class="n">h</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
        <span class="n">w</span> <span class="o">=</span> <span class="mi">100</span>
      <span class="p">})</span>

      <span class="c1">-- Show the icon and automatically delete it after 1 second</span>
      <span class="n">iconCanvas</span><span class="p">:</span><span class="n">show</span><span class="p">()</span>
      <span class="n">hs</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">doAfter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span> <span class="n">iconCanvas</span><span class="p">:</span><span class="n">delete</span><span class="p">()</span> <span class="k">end</span><span class="p">)</span>

      <span class="c1">-- Launch or focus the application</span>
      <span class="n">hs</span><span class="p">.</span><span class="n">application</span><span class="p">.</span><span class="n">launchOrFocus</span><span class="p">(</span><span class="n">appName</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1">-- Use the generic function to set hotkeys for different applications</span>
<span class="n">bindAppHotkey</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">},</span> <span class="s2">"C"</span><span class="p">,</span> <span class="s2">"Google Chrome"</span><span class="p">)</span>
<span class="n">bindAppHotkey</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">},</span> <span class="s2">"S"</span><span class="p">,</span> <span class="s2">"Sublime Text"</span><span class="p">)</span>
<span class="n">bindAppHotkey</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">},</span> <span class="s2">"space"</span><span class="p">,</span> <span class="s2">"iTerm"</span><span class="p">)</span>
</code></pre></div></div> <p>I’d like to show the app icon rather than the app name :)</p> <h3 id="demo-2-retrigger">Demo 2: Retrigger</h3> <p>Sometimes we’d like to use functions such as screenshots, OCR, or translation. They’re different from opening an app. So we can use a hotkey to trigger another hotkey.</p> <div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hs</span><span class="p">.</span><span class="n">hotkey</span><span class="p">.</span><span class="n">bind</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">},</span> <span class="s2">"A"</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
  <span class="n">hs</span><span class="p">.</span><span class="n">eventtap</span><span class="p">.</span><span class="n">keyStroke</span><span class="p">({</span><span class="s2">"alt"</span><span class="p">,</span> <span class="s2">"cmd"</span><span class="p">},</span> <span class="s2">"A"</span><span class="p">)</span>
<span class="k">end</span><span class="p">)</span>
</code></pre></div></div> <p>I define the screenshot hotkey as <code class="language-plaintext highlighter-rouge">Option+Command+A</code>, and then bind the <code class="language-plaintext highlighter-rouge">Option+A</code> in Hammerspoon. Now, I can take a screenshot by <code class="language-plaintext highlighter-rouge">Option+A</code> .</p> <h1 id="references">References</h1> <ul> <li><a href="https://www.reddit.com/r/macapps/comments/1fjpiiw/psa_macos_15_breaks_optionkey_hotkeys/">https://www.reddit.com/r/macapps/comments/1fjpiiw/psa_macos_15_breaks_optionkey_hotkeys/</a></li> <li><a href="https://developer.apple.com/forums/thread/763878?answerId=804374022#804374022">https://developer.apple.com/forums/thread/763878?answerId=804374022#804374022</a></li> <li><a href="https://www.hammerspoon.org/">https://www.hammerspoon.org/</a></li> </ul>]]></content><author><name></name></author><category term="Tricks"/><category term="MacOS"/><summary type="html"><![CDATA[Background]]></summary></entry></feed>